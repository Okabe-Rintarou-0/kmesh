name: Kmesh CI Workflow

on:
  pull_request:
  merge_group: # enable merge queue
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: true

jobs:

  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        go-version: [ '1.22' ]

    steps:
    - uses: actions/checkout@v3

    - name: Fetch kmesh build image digest
      run: |
        DOCKER_IMAGE_CACHE_KEY=$(docker manifest inspect ghcr.io/kmesh-net/kmesh-build | grep -m 1 '"digest"' | awk -F'"' '{print $4}' || 'default_cache_key')
        echo "DOCKER_IMAGE_CACHE_KEY=$DOCKER_IMAGE_CACHE_KEY" >> $GITHUB_ENV
        echo "Fetched cache key: $DOCKER_IMAGE_CACHE_KEY"

    - name: Restore Kmesh Build Image Cache if it exists
      id: cache-docker-kmesh
      uses: actions/cache@v3
      with:
        path: ci/cache/docker/kmesh
        key: ${{ env.DOCKER_IMAGE_CACHE_KEY }}

    - name: Update Kmesh Image Cache if cache miss
      if: steps.cache-docker-kmesh.outputs.cache-hit != 'true'
      run: |
        IMAGE_NAME=ghcr.io/kmesh-net/kmesh-build:latest
        docker pull $IMAGE_NAME && mkdir -p ci/cache/docker/kmesh && docker image save $IMAGE_NAME --output ./ci/cache/docker/kmesh/kmesh_build.tar
      
    - name: Use Kmesh Image Cache if cache hit
      if: steps.cache-docker-kmesh.outputs.cache-hit == 'true'
      run: docker image load --input ./ci/cache/docker/kmesh/kmesh_build.tar

    - name: Setup Go
      uses: actions/setup-go@v4.0.0
      with:
        go-version: ${{ matrix.go-version }}

    - name: Run gen-check
      run: |
        make gen-check

    - name: Run Copyright-check
      run : |
        make ./hack/copyright-check.sh

    - name: Build Kmesh
      shell: bash
      run: |
        sudo env "PATH=$PATH" bash ./build.sh

    - name: Setup Enviroments
      run: |
        echo "PKG_CONFIG_PATH=$GITHUB_WORKSPACE/mk" >> $GITHUB_ENV
    
    # Since requiring code generated by the Proto compilation, execute go lint after building.  
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3.7.0
      with:
        args: "--config=common/config/.golangci.yaml --out-format colored-line-number"
        skip-pkg-cache: true

    - name: Go Test
      run: |
        sudo env LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:$GITHUB_WORKSPACE/api/v2-c:$GITHUB_WORKSPACE/bpf/deserialization_to_bpf_map PKG_CONFIG_PATH=$GITHUB_WORKSPACE/mk go test -race -v -vet=off -coverprofile=coverage.out ./pkg/...

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
          # Even though token upload token is not required for public repos,
          # but adding a token might increase successful uploads as per:
          # https://community.codecov.com/t/upload-issues-unable-to-locate-build-via-github-actions-api/3954
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          flags: unittests
          fail_ci_if_error: false
          verbose: true
